https://www.linkedin.com/pulse/what-happens-when-you-type-httpswwwgooglecom-your-press-uwuilekhue

When I got my first browsing phone, and connected to the internet for the first time, this was in 2016, I was curious to how it worked but that was were it ended. Fast forward to COVID 19 Era, when I fell sick and lost my sense of smell and and taste, that was when I typed in "What happens when I lose my sense of smell and taste", in my google search to find my information about my health. There were pop ups, which made me wonder how does https://www.google.com work?
Quick introduction, My name is Osariemen üòé in this article, we will take a journey from www. google .com all the way to Google website. Ever wondered what happens when you type https://www.google.com in your browser and press Enter? Well, you are one of the lucky ones, because you are about to find out what goes behind the scenes. It takes a lot to get you a webpage in just milliseconds, I‚Äôll just highlight a few topics. Are you ready to know, lets GO!!!!!
Introduction to How the Web Stack Works
We use the internet for different purpose and are content with knowing that our browsers work and does what we ask it to do, but this is not voodoo (or is itüëÄ). What happens when we enter a URL (Uniform Resource Locator) https://www.google.com in the search bar above and receive the content of our desired page?
Computers locate each other through IPs (Internet Protocol) which are basically numbers. As you guessed humans aren‚Äôt good at cramming numbers, imagine having to know the exact IP of every site you visit. If you thought Nigerian Uber/Bolt drivers memorizing 25,000 streets is possible, think again. This is applicable to what it would be like memorizing close to 2 billion websites. Okay to be fair, an average person only visits common websites like social media sites, school or work portals, and wiki sites, but still, no one wants to cram random numbers just to access their favorite site.
The browser checks the cache for a DNS record to find the corresponding IP address of www.google.com
DNS Request
DNS(Domain Name System) is a database that maintains the name of the website (URL) and the particular IP address it links to. Every single URL on the internet has a unique IP address assigned to it. The IP address belongs to the computer which hosts the server of the website we are requesting to access. For example, www.google.com has an IP address of 209.85.227.104. So if you‚Äôd like, you can reach www.google.com by typing http://209.85.227.104 on your browser. DNS is a list of URLs, and their IP addresses, like how a phone book is a list of names and their corresponding phone numbers.
The primary purpose of DNS (Domain Name System) is human-friendly navigation. You can easily access a website by typing the correct IP address for it on your browser, but imagine having to remember different sets of numbers for all the sites we regularly access? Therefore, it is easier to remember the name of the website using a URL and let DNS do the work for us by mapping it to the correct IP address.
A Cache is a hardware or software component that stores data so that future requests for that data can be served faster
To find the DNS record, the browser checks four caches.
‚óè First, it checks the browser cache. The browser maintains a repository of DNS records for a fixed duration for websites you have previously visited. So, it is the first place to run a DNS query.
‚óè Second, the browser checks the OS (Operating System) cache. If it is not in the browser cache, the browser will make a system call (i.e., gethostname on Windows) to your underlying computer OS to fetch the record since the OS also maintains a cache of DNS records.
‚óè Third, it checks the router cache. If it‚Äôs not on your computer, the browser will communicate with the router that maintains its‚Äô own cache of DNS records.
‚óè Fourth, it checks the ISP (Internet Service Provider) cache. If all steps fail, the browser will move on to the ISP. Your ISP maintains its‚Äô own DNS server, which includes a cache of DNS records, which the browser would check with the last hope of finding your requested URL.
You may wonder why there are so many caches maintained at so many levels. Although our information being cached somewhere doesn‚Äôt make us feel very comfortable when it comes to privacy, caches are essential for regulating network traffic and improving data transfer times.
If the requested URL is not in the cache, ISP‚Äôs DNS server initiates a DNS query to find the IP address of the server that hosts maps.google.com.
As mentioned earlier, for my computer to connect with the server that hosts google.com, I need the IP address of google.com. The purpose of a DNS query is to search multiple DNS servers on the internet until it finds the correct IP address for the website. This type of search is called a recursive search since the search will repeatedly continue from a DNS server to a DNS server until it either finds the IP address we need or returns an error response saying it was unable to find it.
In this situation, we would call the ISP‚Äôs DNS server a DNS recursor whose responsibility is to find the proper IP address of the intended domain name by asking other DNS servers on the internet for an answer. The other DNS servers are called name servers since they perform a DNS search based on the domain architecture of the website domain name.
Without further confusing you, I‚Äôd like to use the following diagram to explain the domain architecture.
No alt text provided for this image
https://webhostinggeeks.com/guides/dns/

Many website URLs we encounter today contain a third-level domain, a second-level domain, and a top-level domain. Each of these levels contains their own name server, which is queried during the DNS lookup process.
For google.com, first, the DNS recursor will contact the root name server. The root name server will redirect it to the .com domain name server. .com name server will redirect it to the google.com name server. The google.com name server will find the matching IP address for google.com in its‚Äô DNS records and return it to your DNS recursor, which will send it back to your browser.
These requests are sent using small data packets that contain information such as the content of the request and the IP address it is destined for (IP address of the DNS recursor). These packets travel through multiple networking equipment between the client and the server before it reaches the correct DNS server. This equipment use routing tables to figure out which way is the fastest possible way for the packet to reach its‚Äô destination. If these packets get lost, you‚Äôll get a request failed error. Otherwise, they will reach the correct DNS server, grab the correct IP address, and come back to your browser.

2. Protocols: TCP/IP (The browser initiates a TCP/IP connection with the server)
Once the browser receives the correct IP address, it will build a connection with the server that matches the IP address to transfer information. Browsers use internet protocols to build such connections. There are several different internet protocols that can be used, but TCP is the most common protocol used for many types of HTTP requests.

To transfer data packets between your computer(client) and the server, it is important to have a TCP connection established. This connection is established using a process called the TCP/IP three-way handshake. This is a three-step process where the client and the server exchange SYN(synchronize) and ACK(acknowledge) messages to establish a connection.
1. The client machine sends a SYN packet to the server over the internet, asking if it is open for new connections.
2. If the server has open ports that can accept and initiate new connections, it‚Äôll respond with an ACKnowledgment of the SYN packet using a SYN/ACK packet.
3. The client will receive the SYN/ACK packet from the server and will acknowledge it by sending an ACK packet.
Then a TCP connection is established for data transmission!
A TLS (Transport Layer Security) connection from the Client establishes a public key and private key; the Client sends a Hello message to the Server and creates a handshake, using an encrypted symmetric algorithm. A connection between the server and client is established once the client verifies the server via a certificate during the TLS handshake. A finish (FIN) message is sent by the client to the server with the agreed symmetric key. During the TLS handshake, the HTTP version is decided e.g. HTTP/1.1 and HTTP/2.0.
In other words, TLS is responsible for the encryption and the authentication of the SDUs exchanged by the application layer protocol while TCP provides the reliable delivery of this encrypted and authenticated bytestream. TLS is used by many different application layer protocols.
3. Firewall
To protect themselves from hackers and attacks, servers are often equipped with a firewall. A firewall is a software that sets rules about what can enter or leave a part of a network. In the case of our example, when the browser asks for the website at the address 54.172.4.191, that request has be processed by a firewall which will decide if it‚Äôs safe, or if it‚Äôs a threat to the server‚Äôs security. The browser itself can also be equipped with a firewall to detect if the IP given by the DNS request is a potential malicious agent. A firewall monitors incoming and outgoing traffic over a network, in essence, whatever rules are set by a particular team to define what‚Äôs or who can access particular channels, think of it as a barrier between private and public internet.
4. HTTPS/SSL
Once the TCP connection is established, it is time to start transferring data! The browser will send a GET request asking for google.com web page. If you‚Äôre entering credentials or submitting a form, this could be a POST request. This request will also contain additional information such as browser identification (User-Agent header), types of requests that it will accept (Accept header), and connection headers asking it to keep the TCP connection alive for additional requests. It will also pass information taken from cookies the browser has in store for this domain.
Sample GET request (Headers are highlighted):
No alt text provided for this image
5. Load Balancer (helps regulate traffic on server )
As we mentioned earlier, websites live on servers. For most website where the traffic is consequent, it would be impossible to be hosted on a single server. Plus, it would create a Single Point of Failure (SPOF), because it would only need one attack on said server to take the whole site down.
As needs for higher availability and security rises, websites started augmenting the number of servers they have, organizing them in clusters, and using load-balancers. A load-balancer is a software program that distribute network requests between several servers, following a load-balancing algorithm. HAproxy is a very famous load-balancer, and example of algorithms that we can use are the round-robin, which distributes the requests alternating between all the servers evenly and consequentially, or the least-connection, which distributes requests depending on the current server loads.
6. Web Server (The server handles and sends back a response)
The continuation of point 4 above (HTTP/SSL), The server contains a webserver (i.e., Apache, IIS) that receives the request from the browser and passes it to a request handler to read and generate a response. The request handler is a program (written in ASP.NET, PHP, Ruby, etc.) that reads the request, its‚Äô headers, and cookies to check what is being requested and also update the information on the server if needed. Then it will assemble a response in a particular format (JSON, XML, HTML).
The server sends out an HTTP response
The server response contains the web page you requested as well as the status code, compression type (Content-Encoding), how to cache the page (Cache-Control), any cookies to set, privacy information, etc.

Example HTTP server response:
No alt text provided for this image
If you look at the above response, the first line shows a status code. This is quite important as it tells us the status of the response. There are five types of statuses detailed using a numerical code.
‚óè 1xx indicates an informational message only
‚óè 2xx indicates success of some kind
‚óè 3xx redirects the client to another URL
‚óè 4xx indicates an error on the client‚Äôs part
‚óè 5xx indicates an error on the server‚Äôs part
So, if you encountered an error, you can take a look at the HTTP response to check what type of status code you have received.
The browser displays the HTML content (for HTML responses, which is the most common)
The browser displays the HTML content in phases. First, it will render the bare bone HTML skeleton. Then it will check the HTML tags and send out GET requests for additional elements on the web page, such as images, CSS stylesheets, JavaScript files, etc. These static files are cached by the browser, so it doesn‚Äôt have to fetch them again the next time you visit the page. In the end, you‚Äôll see maps.google.com appearing on your browser.
Once the requests have been evenly distributed to the servers, they will be processed by one or more web servers. A web server is a software program that serves static content, like simple HTML pages, images or plain text files. Examples of web servers are Nginx or Apache. The web server is responsible for finding where the static content corresponding to the address asked for, is living, and for serving it as an HTTP, or HTTPS response.
7. Application Server
Having a web server is the basis of any web page. But most sites don‚Äôt just want a static page where no interaction is happening, and most websites are dynamic. That means that it‚Äôs possible to interact with the site, save information into it, log in with a user name and a password, etc.
This is made possible by the use of one or more application servers. These are software programs responsible for operating applications, communicate with databases and manage user information, among other things. they work behind web servers and will be able to serve a dynamic application using the static content from the web server.
8. Data Base
The Data Base Management System (DBMS). A database is a collection of data, and the DBMS is the program that is going to interact with the database and retrieve, add, modify data in it.
There are several types of database models. The two main ones are relational databases, and non-relational databases. A relational database can be seen as a collection of tables representing objects, where each column is an attribute and each row is an instance of that object. We can perform SQL (Structured Query Language) queries on those databases. MySQL and PostgreSQL are two popular relational databases. A non-relational database can have many forms, as the data inserted in it doesn‚Äôt have to follow a particular schema. They are also called NoSQL databases.
That‚Äôs it!
Although this seems like a very tedious prolonged process, we know that it takes less than seconds for a web page to render after we hit enter on our keyboard. All of these steps happen within milliseconds before we could even notice. I sincerely hope this article helps you answer the question, ‚ÄúWhat happens when you type https://www.google.com in the browser and press enter?‚Äù
